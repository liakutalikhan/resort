{"ast":null,"code":"var _jsxFileName = \"F:\\\\React\\\\resort\\\\src\\\\component\\\\Context.js\";\nimport React, { Component } from 'react';\nimport Data from '../data';\nconst RoomContext = React.createContext();\n\nclass RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rooms: [],\n      sortedRoom: [],\n      featuredRoom: [],\n      loading: [],\n      type: \"all\",\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      minSize: 0,\n      maxSize: 0,\n      breakfast: false,\n      pets: false\n    };\n\n    this.getRoom = slug => {\n      let tempRoom = [...this.state.rooms];\n      const room = tempRoom.find(room => room.slug === slug);\n      return room;\n    };\n\n    this.handleChange = event => {\n      event.preventDefault();\n      const target = event.target;\n      const value = event.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterRooms);\n    };\n\n    this.filterRooms = () => {\n      let {\n        rooms,\n        type,\n        capacity,\n        price\n      } = this.state; // all the rooms\n\n      let filterRoom = [...rooms]; // transform value\n\n      capacity = parseInt(capacity); // filter by type\n\n      if (type !== 'all') {\n        filterRoom = filterRoom.filter(room => room.type === type);\n      } // filter by capacity \n\n\n      if (capacity !== 1) {\n        filterRoom = filterRoom.filter(room => room.capacity >= capacity);\n      }\n\n      this.setState({\n        sortedRoom: filterRoom\n      });\n    };\n  }\n\n  componentDidMount() {\n    let rooms = this.dataFormate(Data);\n    let featuredRoom = rooms.filter(room => room.featured === true);\n    let maxPrice = Math.max(...rooms.map(item => item.price));\n    let maxSize = Math.max(...rooms.map(item => item.size));\n    this.setState({\n      rooms,\n      featuredRoom,\n      sortedRoom: rooms,\n      loading: false,\n      price: maxPrice,\n      maxPrice,\n      maxSize\n    });\n  }\n\n  dataFormate(Data) {\n    let tempItem = Data.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n      let room = {\n        id,\n        ...item.fields,\n        images\n      };\n      return room;\n    });\n    return tempItem;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(RoomContext.Provider, {\n      value: { ...this.state,\n        getRoom: this.getRoom,\n        handleChange: this.handleChange\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst RoomConsumer = RoomContext.Consumer;\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(RoomConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 16\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 24\n      }\n    })));\n  };\n}\nexport { RoomContext, RoomProvider, RoomConsumer };","map":{"version":3,"sources":["F:/React/resort/src/component/Context.js"],"names":["React","Component","Data","RoomContext","createContext","RoomProvider","state","rooms","sortedRoom","featuredRoom","loading","type","capacity","price","minPrice","maxPrice","minSize","maxSize","breakfast","pets","getRoom","slug","tempRoom","room","find","handleChange","event","preventDefault","target","value","checked","name","setState","filterRooms","filterRoom","parseInt","filter","componentDidMount","dataFormate","featured","Math","max","map","item","size","tempItem","id","sys","images","fields","image","file","url","render","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Data from '../data'\r\nconst RoomContext = React.createContext();\r\n\r\nclass RoomProvider extends Component {\r\n\r\n    state = {\r\n        rooms: [],\r\n        sortedRoom: [],\r\n        featuredRoom: [],\r\n        loading: [],\r\n        type: \"all\",\r\n        capacity: 1,\r\n        price: 0,\r\n        minPrice: 0,\r\n        maxPrice: 0,\r\n        minSize: 0,\r\n        maxSize: 0,\r\n        breakfast: false,\r\n        pets: false,\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        let rooms = this.dataFormate(Data)\r\n        let featuredRoom = rooms.filter(room => room.featured === true);\r\n        let maxPrice = Math.max(...rooms.map(item => item.price));\r\n        let maxSize = Math.max(...rooms.map(item => item.size));\r\n\r\n        this.setState({\r\n            rooms,\r\n            featuredRoom,\r\n            sortedRoom: rooms,\r\n            loading: false,\r\n            price: maxPrice,\r\n            maxPrice,\r\n            maxSize\r\n        })\r\n    }\r\n\r\n    dataFormate(Data) {\r\n        let tempItem = Data.map((item) => {\r\n            let id = item.sys.id\r\n            let images = item.fields.images.map(image => image.fields.file.url);\r\n            let room = { id, ...item.fields, images }\r\n\r\n            return room;\r\n        })\r\n        return tempItem;\r\n    }\r\n\r\n    getRoom = (slug) => {\r\n        let tempRoom = [...this.state.rooms]\r\n        const room = tempRoom.find(room => room.slug === slug)\r\n        return room;\r\n    }\r\n\r\n    handleChange = event => {\r\n        event.preventDefault();\r\n        const target = event.target;\r\n        const value = event.type === 'checkbox' ?\r\n            target.checked : target.value;\r\n        const name = event.target.name;\r\n        this.setState({\r\n            [name]: value\r\n        }, this.filterRooms)\r\n\r\n    }\r\n\r\n    filterRooms = () => {\r\n        let { rooms, type, capacity, price } = this.state;\r\n        // all the rooms\r\n        let filterRoom = [...rooms];\r\n        // transform value\r\n        capacity = parseInt(capacity)\r\n        // filter by type\r\n        if (type !== 'all') {\r\n            filterRoom = filterRoom.filter(room => room.type === type)\r\n        }\r\n        // filter by capacity \r\n        if (capacity !== 1) {\r\n            filterRoom = filterRoom.filter(room => room.capacity >= capacity)\r\n        }\r\n        this.setState({\r\n            sortedRoom: filterRoom\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <RoomContext.Provider value={ { ...this.state, getRoom: this.getRoom, handleChange: this.handleChange } }>\r\n                { this.props.children }\r\n            </RoomContext.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nconst RoomConsumer = RoomContext.Consumer;\r\n\r\nexport function withRoomConsumer(Component) {\r\n    return (function ConsumerWrapper(props) {\r\n        return <RoomConsumer>\r\n            { value => <Component { ...props } context={ value } /> }\r\n        </RoomConsumer>\r\n    }\r\n    )\r\n}\r\n\r\nexport { RoomContext, RoomProvider, RoomConsumer };"]},"metadata":{},"sourceType":"module"}